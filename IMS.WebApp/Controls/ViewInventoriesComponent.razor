@inject IViewInventoriesByNameUseCase ViewInventoriesByNameUseCase

<div class="input-group mb-3">
    <input type="text" class="form-control form-control-lg" placeholder="Type inventory name here to search"
        @bind-value="inventoryNameToSearch" y />
    <button type="button" class="input-group-text btn-primary"
        @onclick="@(async() =>{await ViewInventories(); })">View</button>
</div>

@if (this.DisplaySearchResult
&& _inventories != null
&& selectedInventory == null)
{
    <div style="overflow: auto; max-height: 300px;">
        <ul style="list-style-type: none">
            @foreach (var inv in _inventories)
            {
                <li style="cursor: pointer" @onclick="@(async()=> {await SelectInventory(inv);})" @key="inv.InventoryId">
                    @inv.InventoryName</li>
            }
        </ul>
    </div>
}

@if (this.selectedInventory != null)
{
    <test>@this.selectedInventory.InventoryName</test>
}

@code {
    private string? inventoryNameToSearch;
    private List<Inventory>? _inventories;
    private Inventory? selectedInventory;

    [Parameter]
    public EventCallback<List<Inventory>> OnSearchInventories { get; set; }
    [Parameter]
    public EventCallback<Inventory> OnSelectInventory { get; set; }
    [Parameter]
    public bool DisplaySearchResult { get; set; } = false;


    private async Task ViewInventories()
    {
        var inventories = (await ViewInventoriesByNameUseCase
        .ExecuteAsync(inventoryNameToSearch ?? string.Empty))?.ToList();

        await OnSearchInventories.InvokeAsync(inventories);
        _inventories = inventories;
        selectedInventory = null;
    }

    private async Task SelectInventory(Inventory inventory)
    {
        await OnSelectInventory.InvokeAsync(inventory);
        selectedInventory = inventory;
    }
}
